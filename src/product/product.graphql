type ProductAttribute {
  name: String!
  value: String!
}

type ProductVariant {
  _id: ID!
  name: String!
  price: Float!
  salePrice: Float
  stock: Int!
  imageUrls: [String!]
}

type Product {
  _id: ID!
  name: String!
  description: String!
  price: Float!
  salePrice: Float
  categoryIds: [String!]!
  imageUrls: [String!]!
  averageRating: Float!
  reviewCount: Int!
  stock: Int!
  sku: String!
  brand: String
  isActive: Boolean!
  attributes: [ProductAttribute!]
  variants: [ProductVariant!]
  isFeatured: Boolean!
  weight: Float!
  unit: String
  createdAt: DateTime!
  updatedAt: DateTime!
  taxRate: Float
  minOrderQuantity: Int
}

input ProductAttributeInput {
  name: String!
  value: String!
}

input ProductVariantInput {
  _id: ID
  name: String!
  price: Float!
  salePrice: Float
  stock: Int!
  imageUrls: [String!]
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  salePrice: Float
  categoryIds: [String!]!
  imageUrls: [String!]
  stock: Int!
  sku: String!
  brand: String
  isActive: Boolean
  attributes: [ProductAttributeInput!]
  variants: [ProductVariantInput!]
  isFeatured: Boolean
  weight: Float!
  unit: String
  taxRate: Float
  minOrderQuantity: Int
}

input UpdateProductInput {
  _id: ID!
  name: String
  description: String
  price: Float
  salePrice: Float
  categoryIds: [String!]
  imageUrls: [String!]
  stock: Int
  sku: String
  brand: String
  isActive: Boolean
  attributes: [ProductAttributeInput!]
  variants: [ProductVariantInput!]
  isFeatured: Boolean
  weight: Float
  unit: String
  taxRate: Float
  minOrderQuantity: Int
}

input ProductFilterInput {
  search: String
  categoryIds: [String!]
  minPrice: Float
  maxPrice: Float
  brand: String
  inStock: Boolean
  isFeatured: Boolean
  minRating: Float
  limit: Int
  skip: Int
  sortBy: String
  sortOrder: String
}

type Query {
  products(filter: ProductFilterInput): [Product!]!
  productsCount(filter: ProductFilterInput): Int!
  product(id: ID!): Product!
  productBySku(sku: String!): Product!
  featuredProducts(limit: Int): [Product!]!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  updateProduct(input: UpdateProductInput!): Product!
  removeProduct(id: ID!): Product!
  updateProductStock(id: ID!, quantity: Int!): Product!
}
