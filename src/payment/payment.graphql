scalar Date

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

type Payment {
  _id: ID!
  orderId: ID!
  userId: ID!
  method: String!
  amount: Float!
  status: PaymentStatus!
  transactionId: String
  paymentIntentId: String
  receiptUrl: String
  createdAt: Date!
  updatedAt: Date!
  paidAt: Date
  failureMessage: String
}

input CreatePaymentInput {
  orderId: ID!
  userId: ID!
  method: String!
  amount: Float!
  status: PaymentStatus = PENDING
  transactionId: String
  paymentIntentId: String
  receiptUrl: String
}

input UpdatePaymentInput {
  id: ID!
  method: String
  amount: Float
  status: PaymentStatus
  transactionId: String
  paymentIntentId: String
  receiptUrl: String
  paidAt: Date
  failureMessage: String
}

input PaymentFilterInput {
  userId: ID
  orderId: ID
  method: String
  status: PaymentStatus
  startDate: Date
  endDate: Date
  transactionId: String
}

type Query {
  payments(filter: PaymentFilterInput): [Payment!]!
  payment(id: ID!): Payment
  paymentsByOrder(orderId: ID!): [Payment!]!
  paymentsByUser(userId: ID!): [Payment!]!
}

type Mutation {
  createPayment(input: CreatePaymentInput!): Payment!
  updatePayment(input: UpdatePaymentInput!): Payment!
  deletePayment(id: ID!): Boolean!
  processPayment(paymentId: ID!): Payment!
  refundPayment(paymentId: ID!, amount: Float): Payment!
}
